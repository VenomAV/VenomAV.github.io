<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cqrs on Development: people, code &amp; me</title>
    <link>https://www.andreavallotti.tech/it/tags/cqrs/</link>
    <description>Recent content in Cqrs on Development: people, code &amp; me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 08 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.andreavallotti.tech/it/tags/cqrs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Event Sourcing e CQRS in C#</title>
      <link>https://www.andreavallotti.tech/it/2018/01/event-sourcing-e-cqrs-in-c/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.andreavallotti.tech/it/2018/01/event-sourcing-e-cqrs-in-c/</guid>
      <description>Come promesso al termine del post precedente, in questo articolo approfondirò gli aspetti pratici legati al DDD ed in particolare ai pattern CQRS ed Event Sourcing.
L’obiettivo principale dell’esperimento è quello di implementare un aggregato secondo il paradigma Event Sourcing e di creare un modello di lettura separato per alimentare le pagine di un&amp;rsquo;applicazione Web.
Prima di presentare l&amp;rsquo;esempio pratico farò una breve introduzione dei principali pattern architetturali che sono stati utilizzati dalla nascita del DDD.</description>
    </item>
    
  </channel>
</rss>